<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 🍊&#39;s BLOG</title>
    <link>https://hungyam.gitee.io/code/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 🍊&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hungyam.gitee.io/code/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sort</title>
      <link>https://hungyam.gitee.io/code/p/sort/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/sort/</guid>
      <description>[TOC]
排序算法：即把一串无序数列，按照从大到小或者从小到大的规则进行排列。
 数组：C语言数组可理解为多个连续相同变量的集合。 定义方法如下：  int num[10];	//长度为10的整数数组，即10个int变量的集合 char str[20];	//长度为20的字符数组，同时可以存字符串（长度最大为19） double n[30];	//长度为30的双精度数组，即30个double变量的集合  读与写：   注意C语言习惯从0开始，数组下标（中括号中的数字称为下标）规定以0开始，因此开10个长度的数组，最大只能访问到下标9，如下面使用：
 int num[10]; num[9]=2;	//accept num[10]=1;	//error，数组越界 printf(&amp;#34;%d&amp;#34;,num[10]); //error  即定义时的num[10]中的10表示的是长度，要与之后的使用相区别，10个长度的数组对应的变量为num[0],num[1],...,num[9]共10个。
 下面是几种初始化方法：  int num[10]={1,2,3,4,5,6,7,8,9,10}; //初始化 //num[0]~num[9]分别对应 1～10  int n[10]={0};	//初始化，全为0  char str[20]=&amp;#34;hello!&amp;#34;; //初始化，字符串，一个一个字符赋值 //str[0]~str[6]分别对应 &amp;#39;h&amp;#39;&amp;#39;e&amp;#39;&amp;#39;l&amp;#39;&amp;#39;l&amp;#39;&amp;#39;o&amp;#39;&amp;#39;!&amp;#39;&amp;#39;\0&amp;#39;,最后一个为字符串结束符号 //因此20长度的char数组只能存长度为19的字符串 对数组的读与写：
int num[10]={1,2,3,4,5,6,7,8,9,10}; char str[20]=&amp;#34;hello!&amp;#34;; //read int b=num[3];	//b=4 printf(&amp;#34;%d %d&amp;#34;,num[9],b); //output: 10 4  //write num[4]=99; str[0]=&amp;#39;H&amp;#39;; printf(&amp;#34;%c %d %s&amp;#34;,str[0],num[4],str);//output: H 99 Hello!</description>
    </item>
    
    <item>
      <title>Loop</title>
      <link>https://hungyam.gitee.io/code/p/loop/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/loop/</guid>
      <description>[TOC]
循环语句解析与图形打印 表达式的值 表达式分为两种：
  赋值运算表达式
使用到= += -= ++ --等赋值运算符的式子，例如b=5 a++等等，这些表达式都有值，他们的值取决于被赋值的变量是否为0，为0则表达式的值为0（假），非0则表达式的值为1（真）。
  关系运算表达式
使用到&amp;gt; == &amp;lt;=等关系运算符的式子，例如a&amp;lt;=b c==5等等，这些表达式的值取决于表达式是否成立，条件成立则值为1（真），条件不成立则为0（假）。
   可理解为数学中的命题真假性
 这里是一些表达式的值：
循环语句 while循环 一般形式为：
while(表达式){ 语句块 } 意思是，先计算“表达式”的值，当值为真（非0）时， 执行“语句块”；执行完“语句块”，再次计算表达式的值，如果为真，继续执行“语句块”……这个过程会一直重复，直到表达式的值为假（0），就退出循环，执行 while 后面的代码。
通常将“表达式”称为循环条件，把“语句块”称为循环体，整个循环的过程就是不停判断循环条件、并执行循环体代码的过程。
用 while 循环计算1加到100的值：
#include &amp;lt;stdio.h&amp;gt;int main(){ int i=1, sum=0; while(i&amp;lt;=100){ sum+=i; i++; } printf(&amp;#34;%d\n&amp;#34;,sum); return 0; } 运行结果：
5050 代码分析：
 程序运行到 while 时，因为 i=1，i&amp;lt;=100 成立，所以会执行循环体；执行结束后 i 的值变为 2，sum 的值变为 1。 接下来会继续判断 i&amp;lt;=100是否成立，因为此时 i=2，i&amp;lt;=100 成立，所以继续执行循环体；执行结束后 i 的值变为 3，sum 的值变为3。 重复执行步骤 2。 当循环进行到第100次，i 的值变为 101，sum 的值变为5050；因为此时 i&amp;lt;=100 不再成立，所以就退出循环，不再执行循环体，转而执行while循环后面的代码。  for循环 for 循环的一般形式为：</description>
    </item>
    
    <item>
      <title>BasicIO</title>
      <link>https://hungyam.gitee.io/code/p/basicio/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/basicio/</guid>
      <description>输入缓冲区与scanf( )的详细解读 输入缓冲区 C语言中我们用到的最频繁的输入输出方式就是scanf()与printf()。
  scanf()： 从标准输入设备(键盘)读取数据，并将值存放在变量中。
  printf()： 将指定的文字/字符串输出到标准输出设备(屏幕)。
  但从键盘读入数据到程序变量之间还有一个东西起着至关重要的作用&amp;mdash;&amp;mdash;缓冲区（如下图）
 缓冲区 
但缓冲区具体如何工作的呢？
当我们从键盘上输入输入某些内容（未敲回车前），这些内容将被读进缓冲区，等待被处理。直到敲击了回车键，回车键是将缓冲区内容提交到程序代码中的标志。
 特别要注意的是，作为标志的回车键本身也是字符（\n 换行符）
 因此，假设我在键盘上输入Love并按下回车，缓冲区应该是先读入换行符，再进行提交。
过程如下：
​	键盘输入: Love (回车)
​	缓冲区内容: Love\n (得到提交要求)
​	程序获取缓冲区内容: Love\n
看到这里，或许还是不清楚\n会对输入带来什么影响。在文章的后面内容会有关于字符读入的更详细的例子。
引入缓冲区的原理，当然是要服务输入输出函数的，scanf和printf是搭配使用的函数，他们使用方法基本一致，只是一个负责输入，一个负责输出。
解读scanf( ) scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;n,&amp;amp;m);  第一个参数格式化输入控制字符串（C语言中双引号中的内容表示字符串）即“%d %d”，在printf这个字符串用来规定打印在屏幕上内容的格式，对其加空格，让变量以何种形式展现等等，scanf中也一样，规定我们要以何种方式来输入。 后面的变量是与第一个参数（字符串）相对应的接收输入数据的变量地址列表。（地址这个概念这里先不多做赘述，这也就是为什么scanf变量要加上&amp;amp;的原因，先理解为变量按顺序匹配字符串中的%就行）  说多概念无益，直接上代码 #include &amp;lt;stdio.h&amp;gt;int main() { int a, b, c; scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); scanf(&amp;#34;%d, %d, %d&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;c); printf(&amp;#34;a+b+c=%d\n&amp;#34;, a+b+c); scanf(&amp;#34;%d is bigger than %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a-b=%d\n&amp;#34;, a-b); scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); return 0; } 运行结果：</description>
    </item>
    
  </channel>
</rss>
