<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 小橘子&#39;s BLOG</title>
    <link>https://hungyam.gitee.io/code/categories/c/</link>
    <description>Recent content in C on 小橘子&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hungyam.gitee.io/code/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How To Use Clion</title>
      <link>https://hungyam.gitee.io/code/p/how-to-use-clion/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/how-to-use-clion/</guid>
      <description>CLion的安装、配置与使用 以及如何对代码进行调试(debug) 1.编译器的安装   Win
MinGW，点此下载 ，解压密码：hpat
下载完毕将压缩包内容解压到C盘下（个人习惯，放其他位置也可，但需记住所放位置）  将mingw64解压在根目录 
  Mac
终端执行
   xcode-select --install 2.下载安装Clion  地址：点此下载 下载后正常安装即可 安装后弹出登陆选项，此时需要注册一个教育账号即可激活，点此注册 进入后用教育（中大）邮箱注册 注册后登录激活即可（若注册失败也可尝试使用本人账号激活username:1159292671@qq.com,password:#Xhx0530!）  3.开始使用，运行自己的第一个程序   创建工程
 选择创建新工程 
  选择C语言工程，并为工程命名
 
  进入设置
 
  选择Toolchains-&amp;gt;MinGW
 
  若MinGW解压在C盘根目录下，一般将自动识别，若识别失败，也可自己填写所在位置C:\mingw64（我将MinGW解压在C盘根目录，如果你的不是，按照你的情况改地址即可）
 成功识别到 
  保存设置即可运行第一个程序，点击右上角开始按键
 成功完成输入输出 
   至此软件配置成功，需要做另一个程序按上述步骤创建运行即可，不必再选择编译器
 3.如何调试自己的程序   这里给一个样例，点击一下序号右边，会出现小红点（程序断点，表明程序执行到此处将暂停），接着点击运行案件右侧的调试按键。</description>
    </item>
    
    <item>
      <title>括号匹配</title>
      <link>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</guid>
      <description>括号匹配 1.直接对相应的左右括号进行记录，左括号加一，右括号减一，一旦计数出现负数则不匹配（因为不能先出现右括号）
#include &amp;lt;stdio.h&amp;gt;int main (void){ char c; char ch[60]; int a,b,d; a=b=d=0; while(scanf(&amp;#34;%c&amp;#34;,&amp;amp;c)==1){ switch(c){ case &amp;#39;(&amp;#39;:a++;break; case &amp;#39;)&amp;#39;:a--;break; case &amp;#39;[&amp;#39;:b++;break; case &amp;#39;]&amp;#39;:b--;break; case &amp;#39;{&amp;#39;:d++;break; case &amp;#39;}&amp;#39;:d--;break; } if(a&amp;lt;0||b&amp;lt;0||d&amp;lt;0){ printf(&amp;#34;No&amp;#34;); return 0; } } if(a==0&amp;amp;&amp;amp;b==0&amp;amp;&amp;amp;d==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 2.用栈实现。
​	遇到左括号，将其压入栈；
​	遇到右括号，若栈顶为对应的左括号，则将左括号出栈。
​	最后判断栈是否为空，空则匹配。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;int main() { char a[100]={0}; char stack[100]={0}; scanf(&amp;#34;%s&amp;#34;,a); int len=strlen(a); int k=0; if(a[0]==&amp;#39;{&amp;#39;||a[0]==&amp;#39;}&amp;#39;||a[0]==&amp;#39;[&amp;#39;||a[0]==&amp;#39;]&amp;#39;||a[0]==&amp;#39;(&amp;#39;||a[0]==&amp;#39;)&amp;#39;) { stack[k++]=a[0]; } for(int i=1;i&amp;lt;len;i++) { if(a[i]==&amp;#39;{&amp;#39;||a[i]==&amp;#39;[&amp;#39;||a[i]==&amp;#39;(&amp;#39;) stack[k++]=a[i]; if(a[i]==&amp;#39;}&amp;#39;) { if(stack[k-1]==&amp;#39;{&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;]&amp;#39;) { if(stack[k-1]==&amp;#39;[&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;)&amp;#39;) { if(stack[k-1]==&amp;#39;(&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } } if(stack[0]==0&amp;amp;&amp;amp;stack[1]==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 例如：4+(2+8)*[5/(9-7)]​ 由于栈具有“先进后出”的特点，能很好地表现优先级这个性质，因此可以用栈来存储已经检测到的括号。</description>
    </item>
    
    <item>
      <title>中缀转后缀、后缀求解</title>
      <link>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</guid>
      <description>Lab Work 04-1. Application of Stacks Note: Programming in C,
Design a C program to implement:
 (1) Arithmetic expression translation: from in-fix to post-fix notation (2) Evaluation of an arithmetic expression in post-fix notation  Solution: #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(){ char in_fix[20]={0};//中缀  char post_fix[20]={0};//后准  char stack[20]={0};//  int top=0; int index=0; scanf(&amp;#34;%s&amp;#34;,in_fix); /*translation*/ for(int i=0;i&amp;lt;strlen(in_fix);i++){ if(in_fix[i]&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;in_fix[i]&amp;lt;=&amp;#39;9&amp;#39;){ post_fix[index++]=in_fix[i]; }else if(in_fix[i]==&amp;#39;(&amp;#39;){ stack[top++]=&amp;#39;(&amp;#39;; }else if(in_fix[i]==&amp;#39;)&amp;#39;){ while(stack[top-1]!=&amp;#39;(&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } }else if(in_fix[i]==&amp;#39;+&amp;#39;||in_fix[i]==&amp;#39;-&amp;#39;){ if(top){ while(stack[top-1]==&amp;#39;*&amp;#39;||stack[top-1]==&amp;#39;/&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } } stack[top++]=in_fix[i]; }else{ stack[top++]=in_fix[i]; } } while(top){ if(stack[top-1]!</description>
    </item>
    
    <item>
      <title>Polynomials of one indeterminate</title>
      <link>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</guid>
      <description>Requirements: Note: Programming in C, Let n be a positive integer with specified initial value n=30. Use an array of n units to store polynomials of one indeterminate (一元多项式). Design and implement a C program to:
 Determine the data structure of the array Use a stack S in the array to store unused units. Initially all the units are unused and the 0 to (n-1) indexes spread randomly on the stack Use two lists LP and LQ in the array to store two polynomials P and Q of one indeterminate Show the map of the array Adding P and Q, restore the result as a list LPQ in the array, and release all garbage units to the stack Show the map of the array again  Solution： ​	链表的静态实现法，利用数组模拟动态链表，用栈来标记还未使用的节点。</description>
    </item>
    
  </channel>
</rss>
