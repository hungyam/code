<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 🍊&#39;s BLOG</title>
    <link>https://hungyam.gitee.io/code/categories/c/</link>
    <description>Recent content in C on 🍊&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hungyam.gitee.io/code/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Loop</title>
      <link>https://hungyam.gitee.io/code/p/loop/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/loop/</guid>
      <description>[TOC]
循环语句解析与图形打印 表达式的值 表达式分为两种：
  赋值运算表达式
使用到= += -= ++ --等赋值运算符的式子，例如b=5 a++等等，这些表达式都有值，他们的值取决于被赋值的变量是否为0，为0则表达式的值为0（假），非0则表达式的值为1（真）。
  关系运算表达式
使用到&amp;gt; == &amp;lt;=等关系运算符的式子，例如a&amp;lt;=b c==5等等，这些表达式的值取决于表达式是否成立，条件成立则值为1（真），条件不成立则为0（假）。
   可理解为数学中的命题真假性
 这里是一些表达式的值：
循环语句 while循环 一般形式为：
while(表达式){ 语句块 } 意思是，先计算“表达式”的值，当值为真（非0）时， 执行“语句块”；执行完“语句块”，再次计算表达式的值，如果为真，继续执行“语句块”……这个过程会一直重复，直到表达式的值为假（0），就退出循环，执行 while 后面的代码。
通常将“表达式”称为循环条件，把“语句块”称为循环体，整个循环的过程就是不停判断循环条件、并执行循环体代码的过程。
用 while 循环计算1加到100的值：
#include &amp;lt;stdio.h&amp;gt;int main(){ int i=1, sum=0; while(i&amp;lt;=100){ sum+=i; i++; } printf(&amp;#34;%d\n&amp;#34;,sum); return 0; } 运行结果：
5050 代码分析：
 程序运行到 while 时，因为 i=1，i&amp;lt;=100 成立，所以会执行循环体；执行结束后 i 的值变为 2，sum 的值变为 1。 接下来会继续判断 i&amp;lt;=100是否成立，因为此时 i=2，i&amp;lt;=100 成立，所以继续执行循环体；执行结束后 i 的值变为 3，sum 的值变为3。 重复执行步骤 2。 当循环进行到第100次，i 的值变为 101，sum 的值变为5050；因为此时 i&amp;lt;=100 不再成立，所以就退出循环，不再执行循环体，转而执行while循环后面的代码。  for循环 for 循环的一般形式为：</description>
    </item>
    
    <item>
      <title>BasicIO</title>
      <link>https://hungyam.gitee.io/code/p/basicio/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/basicio/</guid>
      <description>输入缓冲区与scanf( )的详细解读 输入缓冲区 C语言中我们用到的最频繁的输入输出方式就是scanf()与printf()。
  scanf()： 从标准输入设备(键盘)读取数据，并将值存放在变量中。
  printf()： 将指定的文字/字符串输出到标准输出设备(屏幕)。
  但从键盘读入数据到程序变量之间还有一个东西起着至关重要的作用&amp;mdash;&amp;mdash;缓冲区（如下图）
 缓冲区 
但缓冲区具体如何工作的呢？
当我们从键盘上输入输入某些内容（未敲回车前），这些内容将被读进缓冲区，等待被处理。直到敲击了回车键，回车键是将缓冲区内容提交到程序代码中的标志。
 特别要注意的是，作为标志的回车键本身也是字符（\n 换行符）
 因此，假设我在键盘上输入Love并按下回车，缓冲区应该是先读入换行符，再进行提交。
过程如下：
​	键盘输入: Love (回车)
​	缓冲区内容: Love\n (得到提交要求)
​	程序获取缓冲区内容: Love\n
看到这里，或许还是不清楚\n会对输入带来什么影响。在文章的后面内容会有关于字符读入的更详细的例子。
引入缓冲区的原理，当然是要服务输入输出函数的，scanf和printf是搭配使用的函数，他们使用方法基本一致，只是一个负责输入，一个负责输出。
解读scanf( ) scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;n,&amp;amp;m);  第一个参数格式化输入控制字符串（C语言中双引号中的内容表示字符串）即“%d %d”，在printf这个字符串用来规定打印在屏幕上内容的格式，对其加空格，让变量以何种形式展现等等，scanf中也一样，规定我们要以何种方式来输入。 后面的变量是与第一个参数（字符串）相对应的接收输入数据的变量地址列表。（地址这个概念这里先不多做赘述，这也就是为什么scanf变量要加上&amp;amp;的原因，先理解为变量按顺序匹配字符串中的%就行）  说多概念无益，直接上代码 #include &amp;lt;stdio.h&amp;gt;int main() { int a, b, c; scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); scanf(&amp;#34;%d, %d, %d&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;c); printf(&amp;#34;a+b+c=%d\n&amp;#34;, a+b+c); scanf(&amp;#34;%d is bigger than %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a-b=%d\n&amp;#34;, a-b); scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a+b=%d\n&amp;#34;, a+b); return 0; } 运行结果：</description>
    </item>
    
    <item>
      <title>How To Use Clion</title>
      <link>https://hungyam.gitee.io/code/p/how-to-use-clion/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/how-to-use-clion/</guid>
      <description>CLion的安装、配置与使用 以及如何对代码进行调试(debug) 1.编译器的安装   Win
MinGW，点此下载 ，解压密码：hpat
下载完毕将压缩包内容解压到C盘下（个人习惯，放其他位置也可，但需记住所放位置）  将mingw64解压在根目录 
  Mac
终端执行
   xcode-select --install 2.下载安装Clion  地址：点此下载 下载后正常安装即可 安装后弹出登陆选项，此时需要注册一个教育账号即可激活，点此注册 进入后用教育（中大）邮箱注册 注册后登录激活即可（若注册失败也可尝试使用本人账号激活username:1159292671@qq.com,password:#Xhx0530!）  3.开始使用，运行自己的第一个程序   创建工程
 选择创建新工程 
  选择C语言工程，并为工程命名
 
  进入设置
 
  选择Toolchains-&amp;gt;MinGW
 
  若MinGW解压在C盘根目录下，一般将自动识别，若识别失败，也可自己填写所在位置C:\mingw64（我将MinGW解压在C盘根目录，如果你的不是，按照你的情况改地址即可）
 成功识别到 
  保存设置即可运行第一个程序，点击右上角开始按键
 成功完成输入输出 
   至此软件配置成功，需要做另一个程序按上述步骤创建运行即可，不必再选择编译器
 3.如何调试自己的程序   这里给一个样例，点击一下序号右边，会出现小红点（程序断点，表明程序执行到此处将暂停），接着点击运行案件右侧的调试按键。</description>
    </item>
    
    <item>
      <title>括号匹配</title>
      <link>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</guid>
      <description>括号匹配 1.直接对相应的左右括号进行记录，左括号加一，右括号减一，一旦计数出现负数则不匹配（因为不能先出现右括号）
#include &amp;lt;stdio.h&amp;gt;int main (void){ char c; char ch[60]; int a,b,d; a=b=d=0; while(scanf(&amp;#34;%c&amp;#34;,&amp;amp;c)==1){ switch(c){ case &amp;#39;(&amp;#39;:a++;break; case &amp;#39;)&amp;#39;:a--;break; case &amp;#39;[&amp;#39;:b++;break; case &amp;#39;]&amp;#39;:b--;break; case &amp;#39;{&amp;#39;:d++;break; case &amp;#39;}&amp;#39;:d--;break; } if(a&amp;lt;0||b&amp;lt;0||d&amp;lt;0){ printf(&amp;#34;No&amp;#34;); return 0; } } if(a==0&amp;amp;&amp;amp;b==0&amp;amp;&amp;amp;d==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 2.用栈实现。
​	遇到左括号，将其压入栈；
​	遇到右括号，若栈顶为对应的左括号，则将左括号出栈。
​	最后判断栈是否为空，空则匹配。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;int main() { char a[100]={0}; char stack[100]={0}; scanf(&amp;#34;%s&amp;#34;,a); int len=strlen(a); int k=0; if(a[0]==&amp;#39;{&amp;#39;||a[0]==&amp;#39;}&amp;#39;||a[0]==&amp;#39;[&amp;#39;||a[0]==&amp;#39;]&amp;#39;||a[0]==&amp;#39;(&amp;#39;||a[0]==&amp;#39;)&amp;#39;) { stack[k++]=a[0]; } for(int i=1;i&amp;lt;len;i++) { if(a[i]==&amp;#39;{&amp;#39;||a[i]==&amp;#39;[&amp;#39;||a[i]==&amp;#39;(&amp;#39;) stack[k++]=a[i]; if(a[i]==&amp;#39;}&amp;#39;) { if(stack[k-1]==&amp;#39;{&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;]&amp;#39;) { if(stack[k-1]==&amp;#39;[&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;)&amp;#39;) { if(stack[k-1]==&amp;#39;(&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } } if(stack[0]==0&amp;amp;&amp;amp;stack[1]==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 例如：4+(2+8)*[5/(9-7)]​ 由于栈具有“先进后出”的特点，能很好地表现优先级这个性质，因此可以用栈来存储已经检测到的括号。</description>
    </item>
    
    <item>
      <title>中缀转后缀、后缀求解</title>
      <link>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</guid>
      <description>Lab Work 04-1. Application of Stacks Note: Programming in C,
Design a C program to implement:
 (1) Arithmetic expression translation: from in-fix to post-fix notation (2) Evaluation of an arithmetic expression in post-fix notation  Solution: #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(){ char in_fix[20]={0};//中缀  char post_fix[20]={0};//后准  char stack[20]={0};//  int top=0; int index=0; scanf(&amp;#34;%s&amp;#34;,in_fix); /*translation*/ for(int i=0;i&amp;lt;strlen(in_fix);i++){ if(in_fix[i]&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;in_fix[i]&amp;lt;=&amp;#39;9&amp;#39;){ post_fix[index++]=in_fix[i]; }else if(in_fix[i]==&amp;#39;(&amp;#39;){ stack[top++]=&amp;#39;(&amp;#39;; }else if(in_fix[i]==&amp;#39;)&amp;#39;){ while(stack[top-1]!=&amp;#39;(&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } }else if(in_fix[i]==&amp;#39;+&amp;#39;||in_fix[i]==&amp;#39;-&amp;#39;){ if(top){ while(stack[top-1]==&amp;#39;*&amp;#39;||stack[top-1]==&amp;#39;/&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } } stack[top++]=in_fix[i]; }else{ stack[top++]=in_fix[i]; } } while(top){ if(stack[top-1]!</description>
    </item>
    
    <item>
      <title>Polynomials of one indeterminate</title>
      <link>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</guid>
      <description>Requirements: Note: Programming in C, Let n be a positive integer with specified initial value n=30. Use an array of n units to store polynomials of one indeterminate (一元多项式). Design and implement a C program to:
 Determine the data structure of the array Use a stack S in the array to store unused units. Initially all the units are unused and the 0 to (n-1) indexes spread randomly on the stack Use two lists LP and LQ in the array to store two polynomials P and Q of one indeterminate Show the map of the array Adding P and Q, restore the result as a list LPQ in the array, and release all garbage units to the stack Show the map of the array again  Solution： ​	链表的静态实现法，利用数组模拟动态链表，用栈来标记还未使用的节点。</description>
    </item>
    
  </channel>
</rss>
