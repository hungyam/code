<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小橘子&#39;s BLOG</title>
    <link>https://hungyam.gitee.io/code/post/</link>
    <description>Recent content in Posts on 小橘子&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hungyam.gitee.io/code/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How To Use Clion</title>
      <link>https://hungyam.gitee.io/code/p/how-to-use-clion/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/how-to-use-clion/</guid>
      <description>CLion的安装、配置与使用 以及如何对代码进行调试(debug) 1.编译器的安装   Win
MinGW，点此下载 ，解压密码：hpat
下载完毕将压缩包内容解压到C盘下（个人习惯，放其他位置也可，但需记住所放位置）  将mingw64解压在根目录 
  Mac
终端执行
   xcode-select --install 2.下载安装Clion  地址：点此下载 下载后正常安装即可 安装后弹出登陆选项，此时需要注册一个教育账号即可激活，点此注册 进入后用教育（中大）邮箱注册 注册后登录激活即可（若注册失败也可尝试使用本人账号激活username:1159292671@qq.com,password:#Xhx0530!）  3.开始使用，运行自己的第一个程序   创建工程
 选择创建新工程 
  选择C语言工程，并为工程命名
 
  进入设置
 
  选择Toolchains-&amp;gt;MinGW
 
  若MinGW解压在C盘根目录下，一般将自动识别，若识别失败，也可自己填写所在位置C:\mingw64（我将MinGW解压在C盘根目录，如果你的不是，按照你的情况改地址即可）
 成功识别到 
  保存设置即可运行第一个程序，点击右上角开始按键
 成功完成输入输出 
   至此软件配置成功，需要做另一个程序按上述步骤创建运行即可，不必再选择编译器
 3.如何调试自己的程序   这里给一个样例，点击一下序号右边，会出现小红点（程序断点，表明程序执行到此处将暂停），接着点击运行案件右侧的调试按键。</description>
    </item>
    
    <item>
      <title>GCC</title>
      <link>https://hungyam.gitee.io/code/p/gcc/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/gcc/</guid>
      <description>MacOS/Win x64 C语言编译器的搭建 Windows x64 MinGW最大的特点就是编译出来的可执行文件能够独立在Windows上运行。
MinGW的组成：
 编译器(支持C、C++、ADA和Fortran) GNU工具  1. MinGW安装 MinGW官方网址：http://www.mingw.org/
由于是墙外网站，经常会出现网站打不开，下载不了的情况，就不详细描述mingw的下载方法。
这里为读者准备了完整的内容包 点此下载
下载完毕将压缩包内容解压到C盘下（个人习惯，放其他位置也可，但需记住所放位置）
2. 添加环境变量  
  解压后出现mingw64文件夹
 
  在此电脑上右键选择属性
 
  左侧选择高级系统设置
 
  高级页下选择环境变量
 
  在系统变量栏中双击Path变量
 
  点击右侧浏览
 
  找到第一步解压的mingw64下的bin文件夹
到这里，环境变量已设置完毕
  3. 测试是否搭建成功  
  在资源管理器的地址栏中输入cmd，并按回车，打开命令行
 
  在命令行下键入 gcc -v，若出现版本号，则为搭建成功</description>
    </item>
    
    <item>
      <title>括号匹配</title>
      <link>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</guid>
      <description>括号匹配 1.直接对相应的左右括号进行记录，左括号加一，右括号减一，一旦计数出现负数则不匹配（因为不能先出现右括号）
#include &amp;lt;stdio.h&amp;gt;int main (void){ char c; char ch[60]; int a,b,d; a=b=d=0; while(scanf(&amp;#34;%c&amp;#34;,&amp;amp;c)==1){ switch(c){ case &amp;#39;(&amp;#39;:a++;break; case &amp;#39;)&amp;#39;:a--;break; case &amp;#39;[&amp;#39;:b++;break; case &amp;#39;]&amp;#39;:b--;break; case &amp;#39;{&amp;#39;:d++;break; case &amp;#39;}&amp;#39;:d--;break; } if(a&amp;lt;0||b&amp;lt;0||d&amp;lt;0){ printf(&amp;#34;No&amp;#34;); return 0; } } if(a==0&amp;amp;&amp;amp;b==0&amp;amp;&amp;amp;d==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 2.用栈实现。
​	遇到左括号，将其压入栈；
​	遇到右括号，若栈顶为对应的左括号，则将左括号出栈。
​	最后判断栈是否为空，空则匹配。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;int main() { char a[100]={0}; char stack[100]={0}; scanf(&amp;#34;%s&amp;#34;,a); int len=strlen(a); int k=0; if(a[0]==&amp;#39;{&amp;#39;||a[0]==&amp;#39;}&amp;#39;||a[0]==&amp;#39;[&amp;#39;||a[0]==&amp;#39;]&amp;#39;||a[0]==&amp;#39;(&amp;#39;||a[0]==&amp;#39;)&amp;#39;) { stack[k++]=a[0]; } for(int i=1;i&amp;lt;len;i++) { if(a[i]==&amp;#39;{&amp;#39;||a[i]==&amp;#39;[&amp;#39;||a[i]==&amp;#39;(&amp;#39;) stack[k++]=a[i]; if(a[i]==&amp;#39;}&amp;#39;) { if(stack[k-1]==&amp;#39;{&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;]&amp;#39;) { if(stack[k-1]==&amp;#39;[&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } if(a[i]==&amp;#39;)&amp;#39;) { if(stack[k-1]==&amp;#39;(&amp;#39;) stack[--k]=0; else stack[k++]=a[i]; } } if(stack[0]==0&amp;amp;&amp;amp;stack[1]==0) printf(&amp;#34;Yes&amp;#34;); else printf(&amp;#34;No&amp;#34;); return 0; } 例如：4+(2+8)*[5/(9-7)]​ 由于栈具有“先进后出”的特点，能很好地表现优先级这个性质，因此可以用栈来存储已经检测到的括号。</description>
    </item>
    
    <item>
      <title>Werun_check</title>
      <link>https://hungyam.gitee.io/code/p/werun_check/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/werun_check/</guid>
      <description>We run 长跑周 ➡➡➡活动打卡情况查询入口 </description>
    </item>
    
    <item>
      <title>中缀转后缀、后缀求解</title>
      <link>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</guid>
      <description>Lab Work 04-1. Application of Stacks Note: Programming in C,
Design a C program to implement:
 (1) Arithmetic expression translation: from in-fix to post-fix notation (2) Evaluation of an arithmetic expression in post-fix notation  Solution: #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(){ char in_fix[20]={0};//中缀  char post_fix[20]={0};//后准  char stack[20]={0};//  int top=0; int index=0; scanf(&amp;#34;%s&amp;#34;,in_fix); /*translation*/ for(int i=0;i&amp;lt;strlen(in_fix);i++){ if(in_fix[i]&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;in_fix[i]&amp;lt;=&amp;#39;9&amp;#39;){ post_fix[index++]=in_fix[i]; }else if(in_fix[i]==&amp;#39;(&amp;#39;){ stack[top++]=&amp;#39;(&amp;#39;; }else if(in_fix[i]==&amp;#39;)&amp;#39;){ while(stack[top-1]!=&amp;#39;(&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } }else if(in_fix[i]==&amp;#39;+&amp;#39;||in_fix[i]==&amp;#39;-&amp;#39;){ if(top){ while(stack[top-1]==&amp;#39;*&amp;#39;||stack[top-1]==&amp;#39;/&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } } stack[top++]=in_fix[i]; }else{ stack[top++]=in_fix[i]; } } while(top){ if(stack[top-1]!</description>
    </item>
    
    <item>
      <title>Two Game by JavaScript</title>
      <link>https://hungyam.gitee.io/code/p/two-game-by-javascript/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/two-game-by-javascript/</guid>
      <description>题目一：迷宫 制作网页实现下图中的迷宫：
 img 
需求规格   UI：UI与上图完全一致；或者，自由发挥，设计出更加漂亮、合理的UI。
  正常赢：移动鼠标，从S开始，到E结束，中间不碰墙，赢得游戏，显示“You Win”
  碰墙输：从S开始后，到E结束之前，碰墙，墙变红，输，显示“You Lose”
  重置结果：离开迷宫，墙恢复正常；从S开始时，隐藏结果显示
  发现作弊：如果用户未经过S，就指到E，又或者指向S之后，从迷宫外绕路指向E，显示&amp;quot;Don&amp;rsquo;t cheat, you should start form the &amp;lsquo;S&amp;rsquo; and move to the &amp;lsquo;E&amp;rsquo; inside the maze!&amp;quot;
迷宫实现网页   题目二：打地鼠 制作网页实现下图中的简版的打地鼠：
 img 
需求规格   UI：UI与上图完全一致；或者，自由发挥，设计出更加漂亮、合理的UI。
  打地鼠：能够随机出现地鼠，鼠标能够击中（点击正确，地鼠消失，出现新地鼠；点击错误，地鼠不消失）
  正确计分：正确计算分数并显示，包括正确结束游戏
打地鼠实现网页   </description>
    </item>
    
    <item>
      <title>选择排序(mips汇编)</title>
      <link>https://hungyam.gitee.io/code/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fmips%E6%B1%87%E7%BC%96/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fmips%E6%B1%87%E7%BC%96/</guid>
      <description>Mars编程： ​	先输入12个整数保存起来，再分成两组（5个整数和7个整数），然后把它们分别用选择排序方法进行排序，最后再显示这两个组的数据的排序结果。
​	例如：
​	输入：20 12 5 6 34 15 4 8 2 6 12 30
​	显示：5 6 12 20 34 2 4 6 8 12 15 30
​	要求排序用一个具有两个参数(基地址和排序整数个数)的叶过程实现。
​	* 选择排序：先利用一个数与其他数比较，找出最大的数，然后在剩余的数中再用同样的方法找最大的，&amp;hellip;
源代码: .text .globl main main: li $v0, 4 la $a0, msg syscall la $s1, nums move $s0, $zero get: li $v0,5 syscall sll $t0, $s0, 2 add $t1, $s1, $t0 sw $v0, 0($t1) addi $s0, $s0, 1 slti $t2, $s0, 12 bne $t2, $zero, get add $s0, $zero, $zero sort1: add $s2, $zero, $zero #内循环控制变量j  lw $t3, 0($s1) #存最大值  add $s6, $zero, $zero #最大值所在的下标  add $t6, $zero, $zero #临时存数组值 loop1: sll $s3, $s2, 2 add $s4, $s3, $s1 lw $t6, 0($s4) #数组值放进t6  slt $s5, $t3, $t6 beq $s5, $zero ,skip1 #max&amp;lt;t6,赋值  add $t3, $zero ,$t6 #更新最大值  add $s6, $zero ,$s2 #更新最大值所在的index skip1: addi $s2 ,$s2, 1 #j++  addi $t4 ,$zero, 4 sub $t4 ,$t4 ,$s0 #t4=4-i  addi $a3 ,$t4 ,1 slt $t5 ,$s2 ,$a3 bne $t5 ,$zero, loop1 #j&amp;lt;t4  sll $t7, $t4 ,2 add $t8, $s1 ,$t7 lw $a1, 0($t8) sll $t7, $s6 ,2 add $t9, $s1 ,$t7 lw $a2, 0($t9) sw $a1, 0($t9) sw $a2, 0($t8) addi $s0, $s0, 1 slti $t2, $s0, 4 bne $t2, $zero, sort1 add $s0, $zero, $zero add $s1, $s1, 20 sort2: add $s2, $zero, $zero #内循环控制变量j  lw $t3, 0($s1) #存最大值  add $s6, $zero, $zero #最大值所在的下标  add $t6, $zero, $zero #临时存数组值 loop2: sll $s3, $s2, 2 add $s4, $s3, $s1 lw $t6, 0($s4) #数组值放进t6  slt $s5, $t3, $t6 beq $s5, $zero ,skip2 #max&amp;lt;t6,赋值  add $t3, $zero ,$t6 #更新最大值  add $s6, $zero ,$s2 #更新最大值所在的index skip2: addi $s2 ,$s2, 1 #j++  addi $t4 ,$zero, 6 sub $t4 ,$t4 ,$s0 #t4=6-i  addi $a3 ,$t4 ,1 slt $t5 ,$s2 ,$a3 bne $t5 ,$zero, loop2 #j&amp;lt;t4  sll $t7, $t4 ,2 add $t8, $s1 ,$t7 lw $a1, 0($t8) sll $t7, $s6 ,2 add $t9, $s1 ,$t7 lw $a2, 0($t9) sw $a1, 0($t9) sw $a2, 0($t8) addi $s0, $s0, 1 slti $t2, $s0, 6 bne $t2, $zero, sort2 move $s0, $zero la $s1, nums out: sll $t0, $s0, 2 add $t1, $s1, $t0 lw $a0, 0($t1) li $v0, 1 syscall la $a0, seperate li $v0, 4 syscall addi $s0, $s0, 1 slti $t2, $s0, 12 bne $t2, $zero, out li $v0, 10 syscall .</description>
    </item>
    
    <item>
      <title>Polynomials of one indeterminate</title>
      <link>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</guid>
      <description>Requirements: Note: Programming in C, Let n be a positive integer with specified initial value n=30. Use an array of n units to store polynomials of one indeterminate (一元多项式). Design and implement a C program to:
 Determine the data structure of the array Use a stack S in the array to store unused units. Initially all the units are unused and the 0 to (n-1) indexes spread randomly on the stack Use two lists LP and LQ in the array to store two polynomials P and Q of one indeterminate Show the map of the array Adding P and Q, restore the result as a list LPQ in the array, and release all garbage units to the stack Show the map of the array again  Solution： ​	链表的静态实现法，利用数组模拟动态链表，用栈来标记还未使用的节点。</description>
    </item>
    
  </channel>
</rss>
