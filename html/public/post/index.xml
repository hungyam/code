<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hungyam</title>
    <link>https://hungyam.gitee.io/code/post/</link>
    <description>Recent content in Posts on Hungyam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hungyam.gitee.io/code/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Werun 达标查询(test)</title>
      <link>https://hungyam.gitee.io/code/p/werun-%E8%BE%BE%E6%A0%87%E6%9F%A5%E8%AF%A2test/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/werun-%E8%BE%BE%E6%A0%87%E6%9F%A5%E8%AF%A2test/</guid>
      <description>查询入口 </description>
    </item>
    
    <item>
      <title>中缀转后缀、后缀求解</title>
      <link>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%90%8E%E7%BC%80%E6%B1%82%E8%A7%A3/</guid>
      <description>Lab Work 04-1. Application of Stacks Note: Programming in C,
Design a C program to implement:
 (1) Arithmetic expression translation: from in-fix to post-fix notation (2) Evaluation of an arithmetic expression in post-fix notation  Solution: #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(){ char in_fix[20]={0};//中缀  char post_fix[20]={0};//后准  char stack[20]={0};//  int top=0; int index=0; scanf(&amp;#34;%s&amp;#34;,in_fix); /*translation*/ for(int i=0;i&amp;lt;strlen(in_fix);i++){ if(in_fix[i]&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;in_fix[i]&amp;lt;=&amp;#39;9&amp;#39;){ post_fix[index++]=in_fix[i]; }else if(in_fix[i]==&amp;#39;(&amp;#39;){ stack[top++]=&amp;#39;(&amp;#39;; }else if(in_fix[i]==&amp;#39;)&amp;#39;){ while(stack[top-1]!=&amp;#39;(&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } }else if(in_fix[i]==&amp;#39;+&amp;#39;||in_fix[i]==&amp;#39;-&amp;#39;){ if(top){ while(stack[top-1]==&amp;#39;*&amp;#39;||stack[top-1]==&amp;#39;/&amp;#39;){ post_fix[index++]=stack[top-1]; top--; } } stack[top++]=in_fix[i]; }else{ stack[top++]=in_fix[i]; } } while(top){ if(stack[top-1]!</description>
    </item>
    
    <item>
      <title>Two Game by JavaScript</title>
      <link>https://hungyam.gitee.io/code/p/two-game-by-javascript/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/two-game-by-javascript/</guid>
      <description>题目一：迷宫 制作网页实现下图中的迷宫：
  img 
需求规格   UI：UI与上图完全一致；或者，自由发挥，设计出更加漂亮、合理的UI。
  正常赢：移动鼠标，从S开始，到E结束，中间不碰墙，赢得游戏，显示“You Win”
  碰墙输：从S开始后，到E结束之前，碰墙，墙变红，输，显示“You Lose”
  重置结果：离开迷宫，墙恢复正常；从S开始时，隐藏结果显示
  发现作弊：如果用户未经过S，就指到E，又或者指向S之后，从迷宫外绕路指向E，显示&amp;quot;Don&amp;rsquo;t cheat, you should start form the &amp;lsquo;S&amp;rsquo; and move to the &amp;lsquo;E&amp;rsquo; inside the maze!&amp;quot;
迷宫实现网页   题目二：打地鼠 制作网页实现下图中的简版的打地鼠：
  img 
需求规格   UI：UI与上图完全一致；或者，自由发挥，设计出更加漂亮、合理的UI。
  打地鼠：能够随机出现地鼠，鼠标能够击中（点击正确，地鼠消失，出现新地鼠；点击错误，地鼠不消失）
  正确计分：正确计算分数并显示，包括正确结束游戏
打地鼠实现网页   </description>
    </item>
    
    <item>
      <title>选择排序(mips汇编)</title>
      <link>https://hungyam.gitee.io/code/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fmips%E6%B1%87%E7%BC%96/</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8Fmips%E6%B1%87%E7%BC%96/</guid>
      <description>Mars编程： ​	先输入12个整数保存起来，再分成两组（5个整数和7个整数），然后把它们分别用选择排序方法进行排序，最后再显示这两个组的数据的排序结果。
​	例如：
​	输入：20 12 5 6 34 15 4 8 2 6 12 30
​	显示：5 6 12 20 34 2 4 6 8 12 15 30
​	要求排序用一个具有两个参数(基地址和排序整数个数)的叶过程实现。
​	* 选择排序：先利用一个数与其他数比较，找出最大的数，然后在剩余的数中再用同样的方法找最大的，&amp;hellip;
源代码: .text .globl main main: li $v0, 4 la $a0, msg syscall la $s1, nums move $s0, $zero get: li $v0,5 syscall sll $t0, $s0, 2 add $t1, $s1, $t0 sw $v0, 0($t1) addi $s0, $s0, 1 slti $t2, $s0, 12 bne $t2, $zero, get add $s0, $zero, $zero sort1: add $s2, $zero, $zero #内循环控制变量j  lw $t3, 0($s1) #存最大值  add $s6, $zero, $zero #最大值所在的下标  add $t6, $zero, $zero #临时存数组值 loop1: sll $s3, $s2, 2 add $s4, $s3, $s1 lw $t6, 0($s4) #数组值放进t6  slt $s5, $t3, $t6 beq $s5, $zero ,skip1 #max&amp;lt;t6,赋值  add $t3, $zero ,$t6 #更新最大值  add $s6, $zero ,$s2 #更新最大值所在的index skip1: addi $s2 ,$s2, 1 #j++  addi $t4 ,$zero, 4 sub $t4 ,$t4 ,$s0 #t4=4-i  addi $a3 ,$t4 ,1 slt $t5 ,$s2 ,$a3 bne $t5 ,$zero, loop1 #j&amp;lt;t4  sll $t7, $t4 ,2 add $t8, $s1 ,$t7 lw $a1, 0($t8) sll $t7, $s6 ,2 add $t9, $s1 ,$t7 lw $a2, 0($t9) sw $a1, 0($t9) sw $a2, 0($t8) addi $s0, $s0, 1 slti $t2, $s0, 4 bne $t2, $zero, sort1 add $s0, $zero, $zero add $s1, $s1, 20 sort2: add $s2, $zero, $zero #内循环控制变量j  lw $t3, 0($s1) #存最大值  add $s6, $zero, $zero #最大值所在的下标  add $t6, $zero, $zero #临时存数组值 loop2: sll $s3, $s2, 2 add $s4, $s3, $s1 lw $t6, 0($s4) #数组值放进t6  slt $s5, $t3, $t6 beq $s5, $zero ,skip2 #max&amp;lt;t6,赋值  add $t3, $zero ,$t6 #更新最大值  add $s6, $zero ,$s2 #更新最大值所在的index skip2: addi $s2 ,$s2, 1 #j++  addi $t4 ,$zero, 6 sub $t4 ,$t4 ,$s0 #t4=6-i  addi $a3 ,$t4 ,1 slt $t5 ,$s2 ,$a3 bne $t5 ,$zero, loop2 #j&amp;lt;t4  sll $t7, $t4 ,2 add $t8, $s1 ,$t7 lw $a1, 0($t8) sll $t7, $s6 ,2 add $t9, $s1 ,$t7 lw $a2, 0($t9) sw $a1, 0($t9) sw $a2, 0($t8) addi $s0, $s0, 1 slti $t2, $s0, 6 bne $t2, $zero, sort2 move $s0, $zero la $s1, nums out: sll $t0, $s0, 2 add $t1, $s1, $t0 lw $a0, 0($t1) li $v0, 1 syscall la $a0, seperate li $v0, 4 syscall addi $s0, $s0, 1 slti $t2, $s0, 12 bne $t2, $zero, out li $v0, 10 syscall .</description>
    </item>
    
    <item>
      <title>Polynomials of one indeterminate</title>
      <link>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hungyam.gitee.io/code/p/polynomials-of-one-indeterminate/</guid>
      <description>Requirements: Note: Programming in C, Let n be a positive integer with specified initial value n=30. Use an array of n units to store polynomials of one indeterminate (一元多项式). Design and implement a C program to:
 Determine the data structure of the array Use a stack S in the array to store unused units. Initially all the units are unused and the 0 to (n-1) indexes spread randomly on the stack Use two lists LP and LQ in the array to store two polynomials P and Q of one indeterminate Show the map of the array Adding P and Q, restore the result as a list LPQ in the array, and release all garbage units to the stack Show the map of the array again  Solution： ​	链表的静态实现法，利用数组模拟动态链表，用栈来标记还未使用的节点。</description>
    </item>
    
  </channel>
</rss>
